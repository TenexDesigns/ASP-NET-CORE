WE CHOOSE ASP.NET EMPTY - To start making our project from scratch

We name our project core 

Whane we go to the core folder , this project folder has the following folders and files



core/
  connected serices
  Dependecies
  properties
     launchsettings.json
  appsettings.json
      appsettings.Development.json
   program.cs
      

asp.net core platform is started through  iis express the profile section  describes a series of launch profiles which define configuration settings for different ways of  running the application this project name section  
This project name section  defines the configuration used by the dot netrun  command which is the default ,however you start  the app either through the console command or by  simply starting it with or without debugging

IN THE ABOVE FOLDER, THERE IS AFILE CALLED  ----> launchsettings.json


launchsettings.json

  "iisSettings": {                                         / This iisSetings section is used  1.USED TO CONFIGURE THE HTTP AND HTTPS PORTS
    "windowsAuthentication": false,                                                           2.Used when the asp.net core is started through the iis expresss, which is how older versions  of asp.net core were deployed
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:20671",
      "sslPort": 44301
    }
  },
  "profiles": {                                          / The profile section 1. describes a series of launch profiles which define configuration settings for different ways of  running the application
    "core": {                   /  This project name section  defines the configuration used by the dot netrun  command ,which is the default ,however you start  the app either through the console command or by  simply starting it with or without debugging
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7298;http://localhost:5212",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {           /The iis express section right here defines  the configuration used when the application  is used with IS express 
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}












we are concerned only with  this profiles project section right here okay im  
going to change the url for http to 3000 port and  im not going to change it for https because im  
not going to be using it for now and im going  to set this launch browser to false as well ,
This will give us a project section looking like this


  "profiles": {
    "core": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7298;http://localhost:3000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },











UNDERSTANFING MIDDLEWAR AND THE REQUEST PIPELINE
    
    
The purpose of the asp.net core platform  is to receive http requests and send responses  
to them which asp delegates to middleware  components middleware components are arranged  
    
in a chain known as the request pipeline when  a new http request arrives it goes through  
the middleware components in the chain would  inspect and modify it in some way if needed 
    
once the request has made its way through the  pipeline the asp platform stands the response  
some components focus on generating responses  for requests but others are there to provide  
    
supporting features such as formatting specific  data types or reading and writing cookies if no  
response is generated by the middleware components  then asp will return a response with the http  
not found status code




SERVICES
    
 Services are objects  that provide features in a web application any  
class can be used as a service and there are no  restrictions on the features that services provide  
what makes services special is that they  are managed by asp and the feature called  
dependency injection makes it possible to easily  access services anywhere in the application  
including middleware components dependency  injection will be covered later on in the course 
    
    
    
 THE PROGRAM.CS FILE   
    
the program cs file contains the code statements  that are executed when the application is started  
and that are used to configure the asp platform  and individual frameworks it supports
    
    

    
    PROGRAM.CS FILE 
    
var builder = WebApplication.CreateBuilder(args);   / CreateBuilder() method - Responsible for setting up the basic feature of the asp platform,  which includes creating services responsible for  configuration data and logging 
var app = builder.Build();                         / Build() method -  this build  method is used to set up middleware components ,and  

    
this empty core template has set up one  middleware component this right here
    
app.MapGet("/", () => "Hello World!");            / This map get method is used to define an  endpoint and endpoints are basically routes but  
                                                 / they represent literally the request handling  code so the code that is executed when there  
                                                / is a url match ,so in this case here  the route is the root of domain which  
                                               / just returns string and thats where the text  was coming from from before "hello world "

app.Run();         /The run method starts listening to  http requests






THE PROJECT FILE
    
   The project file contains the information that the  dot net core platform uses to build the project  
     and keep track of dependencies
   There is no  need usually to edit the product file directly in most projects the most common change to the  file is to add dependencies 


    
    <Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

</Project>















































...
